/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Detailed__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Full",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Full__factory>;
    getContractFactory(
      name: "ERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "AutoCompounder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoCompounder__factory>;
    getContractFactory(
      name: "CamToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CamToken__factory>;
    getContractFactory(
      name: "CamAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CamAave__factory>;
    getContractFactory(
      name: "Uni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uni__factory>;
    getContractFactory(
      name: "CamToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CamToken__factory>;
    getContractFactory(
      name: "Uni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uni__factory>;
    getContractFactory(
      name: "CamWMATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CamWMATIC__factory>;
    getContractFactory(
      name: "EQi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EQi__factory>;
    getContractFactory(
      name: "Erc20QiStablecoincamwbtc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20QiStablecoincamwbtc__factory>;
    getContractFactory(
      name: "Erc20QiStablecoinwbtc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20QiStablecoinwbtc__factory>;
    getContractFactory(
      name: "Erc20Stablecoincamwbtc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Stablecoincamwbtc__factory>;
    getContractFactory(
      name: "Erc20Stablecoinwbtc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Stablecoinwbtc__factory>;
    getContractFactory(
      name: "Erc20QiStablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20QiStablecoin__factory>;
    getContractFactory(
      name: "Erc20Stablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20Stablecoin__factory>;
    getContractFactory(
      name: "IMyVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMyVault__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "IStablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStablecoin__factory>;
    getContractFactory(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IVaultMetaProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultMetaProvider__factory>;
    getContractFactory(
      name: "IVaultMetaRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultMetaRegistry__factory>;
    getContractFactory(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: "Liquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidator__factory>;
    getContractFactory(
      name: "MiStableDai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiStableDai__factory>;
    getContractFactory(
      name: "MiStableUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiStableUSDT__factory>;
    getContractFactory(
      name: "VaultNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultNFT__factory>;
    getContractFactory(
      name: "VaultNFTv2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultNFTv2__factory>;
    getContractFactory(
      name: "VaultNFTv3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultNFTv3__factory>;
    getContractFactory(
      name: "ShareOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShareOracle__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "PriceSource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceSource__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "BalancerVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "QIPOWAH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QIPOWAH__factory>;
    getContractFactory(
      name: "QiStablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QiStablecoin__factory>;
    getContractFactory(
      name: "SimpleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleRegistry__factory>;
    getContractFactory(
      name: "Stablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Stablecoin__factory>;
    getContractFactory(
      name: "Farm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Farm__factory>;
    getContractFactory(
      name: "UsdcSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsdcSwap__factory>;
    getContractFactory(
      name: "VaultMetaProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultMetaProvider__factory>;
    getContractFactory(
      name: "VaultMetaRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultMetaRegistry__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;

    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Detailed>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Full",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Full>;
    getContractAt(
      name: "ERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "AutoCompounder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoCompounder>;
    getContractAt(
      name: "CamToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CamToken>;
    getContractAt(
      name: "CamAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CamAave>;
    getContractAt(
      name: "Uni",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uni>;
    getContractAt(
      name: "CamToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CamToken>;
    getContractAt(
      name: "Uni",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uni>;
    getContractAt(
      name: "CamWMATIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CamWMATIC>;
    getContractAt(
      name: "EQi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EQi>;
    getContractAt(
      name: "Erc20QiStablecoincamwbtc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20QiStablecoincamwbtc>;
    getContractAt(
      name: "Erc20QiStablecoinwbtc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20QiStablecoinwbtc>;
    getContractAt(
      name: "Erc20Stablecoincamwbtc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Stablecoincamwbtc>;
    getContractAt(
      name: "Erc20Stablecoinwbtc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Stablecoinwbtc>;
    getContractAt(
      name: "Erc20QiStablecoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20QiStablecoin>;
    getContractAt(
      name: "Erc20Stablecoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Erc20Stablecoin>;
    getContractAt(
      name: "IMyVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMyVault>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "IStablecoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStablecoin>;
    getContractAt(
      name: "IStakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IVaultMetaProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultMetaProvider>;
    getContractAt(
      name: "IVaultMetaRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultMetaRegistry>;
    getContractAt(
      name: "IStakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: "Liquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidator>;
    getContractAt(
      name: "MiStableDai",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiStableDai>;
    getContractAt(
      name: "MiStableUSDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiStableUSDT>;
    getContractAt(
      name: "VaultNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultNFT>;
    getContractAt(
      name: "VaultNFTv2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultNFTv2>;
    getContractAt(
      name: "VaultNFTv3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultNFTv3>;
    getContractAt(
      name: "ShareOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShareOracle>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "PriceSource",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceSource>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "BalancerVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerVault>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "QIPOWAH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QIPOWAH>;
    getContractAt(
      name: "QiStablecoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QiStablecoin>;
    getContractAt(
      name: "SimpleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleRegistry>;
    getContractAt(
      name: "Stablecoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Stablecoin>;
    getContractAt(
      name: "Farm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Farm>;
    getContractAt(
      name: "UsdcSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UsdcSwap>;
    getContractAt(
      name: "VaultMetaProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultMetaProvider>;
    getContractAt(
      name: "VaultMetaRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultMetaRegistry>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
