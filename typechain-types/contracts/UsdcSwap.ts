/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface UsdcSwapInterface extends utils.Interface {
  functions: {
    "getReserves()": FunctionFragment;
    "transferToken(address,uint256)": FunctionFragment;
    "swapTo(uint256)": FunctionFragment;
    "usdcRate()": FunctionFragment;
    "mimaticRate()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setUSDCRatePerMimatic(uint256)": FunctionFragment;
    "swapFrom(uint256)": FunctionFragment;
    "setMimaticRatePerUSDC(uint256)": FunctionFragment;
    "admin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getReserves"
      | "transferToken"
      | "swapTo"
      | "usdcRate"
      | "mimaticRate"
      | "setAdmin"
      | "setUSDCRatePerMimatic"
      | "swapFrom"
      | "setMimaticRatePerUSDC"
      | "admin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mimaticRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUSDCRatePerMimatic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFrom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMimaticRatePerUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mimaticRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCRatePerMimatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMimaticRatePerUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;

  events: {};
}

export interface UsdcSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsdcSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    transferToken(
      token: string,
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTo(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdcRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    mimaticRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDCRatePerMimatic(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFrom(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMimaticRatePerUSDC(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;
  };

  getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  transferToken(
    token: string,
    amountToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTo(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

  mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDCRatePerMimatic(
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFrom(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMimaticRatePerUSDC(
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    transferToken(
      token: string,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTo(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

    mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setUSDCRatePerMimatic(
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFrom(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMimaticRatePerUSDC(
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    transferToken(
      token: string,
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTo(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

    mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDCRatePerMimatic(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFrom(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMimaticRatePerUSDC(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToken(
      token: string,
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTo(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdcRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mimaticRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCRatePerMimatic(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFrom(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMimaticRatePerUSDC(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
