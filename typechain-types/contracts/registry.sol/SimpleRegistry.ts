/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SimpleRegistryInterface extends utils.Interface {
  functions: {
    "_admin()": FunctionFragment;
    "_registry(string)": FunctionFragment;
    "resolve(string)": FunctionFragment;
    "set(string,string)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_admin"
      | "_registry"
      | "resolve"
      | "set"
      | "setAdmin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "_registry", values: [string]): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;
  encodeFunctionData(functionFragment: "set", values: [string, string]): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;

  decodeFunctionResult(functionFragment: "_admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;

  events: {};
}

export interface SimpleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _admin(overrides?: CallOverrides): Promise<[string]>;

    _registry(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    resolve(name: string, overrides?: CallOverrides): Promise<[string]>;

    set(
      name: string,
      record: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _admin(overrides?: CallOverrides): Promise<string>;

  _registry(arg0: string, overrides?: CallOverrides): Promise<string>;

  resolve(name: string, overrides?: CallOverrides): Promise<string>;

  set(
    name: string,
    record: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _admin(overrides?: CallOverrides): Promise<string>;

    _registry(arg0: string, overrides?: CallOverrides): Promise<string>;

    resolve(name: string, overrides?: CallOverrides): Promise<string>;

    set(name: string, record: string, overrides?: CallOverrides): Promise<void>;

    setAdmin(admin: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _admin(overrides?: CallOverrides): Promise<BigNumber>;

    _registry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolve(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    set(
      name: string,
      record: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      name: string,
      record: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
