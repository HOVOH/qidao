/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface LiquidatorInterface extends utils.Interface {
  functions: {
    "checkCost(uint256)": FunctionFragment;
    "checkMimaticBalance(address)": FunctionFragment;
    "gainRatio()": FunctionFragment;
    "checkExtract(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "checkCollat(uint256)": FunctionFragment;
    "checkValid(uint256)": FunctionFragment;
    "liquidateVault(uint256)": FunctionFragment;
    "maticDebt(address)": FunctionFragment;
    "checkLiquidation(uint256)": FunctionFragment;
    "debtRatio()": FunctionFragment;
    "getPaid()": FunctionFragment;
    "setDebtRatio(uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "setGainRatio(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkCost"
      | "checkMimaticBalance"
      | "gainRatio"
      | "checkExtract"
      | "setAdmin"
      | "checkCollat"
      | "checkValid"
      | "liquidateVault"
      | "maticDebt"
      | "checkLiquidation"
      | "debtRatio"
      | "getPaid"
      | "setDebtRatio"
      | "admin"
      | "setGainRatio"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMimaticBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gainRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkExtract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkCollat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maticDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPaid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDebtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGainRatio",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "checkCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkMimaticBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gainRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkExtract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCollat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maticDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPaid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGainRatio",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Liquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkCost(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkMimaticBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gainRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkExtract(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkCollat(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkValid(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber]>;

    liquidateVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkLiquidation(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtRatio(
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    setGainRatio(
      _gainRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkCost(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkMimaticBalance(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

  checkExtract(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkCollat(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  checkValid(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, BigNumber]>;

  liquidateVault(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkLiquidation(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getPaid(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtRatio(
    _debtRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  setGainRatio(
    _gainRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkCost(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMimaticBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

    checkExtract(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    checkCollat(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkValid(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber]>;

    liquidateVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidation(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getPaid(overrides?: CallOverrides): Promise<void>;

    setDebtRatio(
      _debtRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    setGainRatio(
      _gainRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkCost(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMimaticBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gainRatio(overrides?: CallOverrides): Promise<BigNumber>;

    checkExtract(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkCollat(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkValid(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maticDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidation(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtRatio(
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    setGainRatio(
      _gainRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkCost(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMimaticBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gainRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkExtract(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkCollat(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkValid(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maticDebt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLiquidation(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtRatio(
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGainRatio(
      _gainRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
