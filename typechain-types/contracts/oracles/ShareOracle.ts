/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ShareOracleInterface extends utils.Interface {
  functions: {
    "fallbackPrice()": FunctionFragment;
    "getUnderlying()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "priceSource()": FunctionFragment;
    "shares()": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateFallbackPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fallbackPrice"
      | "getUnderlying"
      | "latestRoundData"
      | "priceSource"
      | "shares"
      | "underlying"
      | "updateFallbackPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fallbackPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFallbackPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fallbackPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFallbackPrice",
    data: BytesLike
  ): Result;

  events: {
    "FallbackPrice(uint80,int256,uint256,uint256,uint80)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FallbackPrice"): EventFragment;
}

export interface FallbackPriceEventObject {
  roundId: BigNumber;
  price: BigNumber;
  startedAt: BigNumber;
  updatedAt: BigNumber;
  answeredInRound: BigNumber;
}
export type FallbackPriceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  FallbackPriceEventObject
>;

export type FallbackPriceEventFilter = TypedEventFilter<FallbackPriceEvent>;

export interface ShareOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShareOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fallbackPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnderlying(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    priceSource(overrides?: CallOverrides): Promise<[string]>;

    shares(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateFallbackPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUnderlying(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  priceSource(overrides?: CallOverrides): Promise<string>;

  shares(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateFallbackPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlying(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    priceSource(overrides?: CallOverrides): Promise<string>;

    shares(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateFallbackPrice(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FallbackPrice(uint80,int256,uint256,uint256,uint80)"(
      roundId?: null,
      price?: null,
      startedAt?: null,
      updatedAt?: null,
      answeredInRound?: null
    ): FallbackPriceEventFilter;
    FallbackPrice(
      roundId?: null,
      price?: null,
      startedAt?: null,
      updatedAt?: null,
      answeredInRound?: null
    ): FallbackPriceEventFilter;
  };

  estimateGas: {
    fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    priceSource(overrides?: CallOverrides): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateFallbackPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fallbackPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFallbackPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
