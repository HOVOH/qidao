/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IATokenInterface extends utils.Interface {
  functions: {
    "allowInterestRedirectionTo(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnOnLiquidation(address,uint256)": FunctionFragment;
    "getInterestRedirectionAddress(address)": FunctionFragment;
    "getRedirectedBalance(address)": FunctionFragment;
    "getUserIndex(address)": FunctionFragment;
    "isTransferAllowed(address,uint256)": FunctionFragment;
    "mintOnDeposit(address,uint256)": FunctionFragment;
    "principalBalanceOf(address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redirectInterestStream(address)": FunctionFragment;
    "redirectInterestStreamOf(address,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOnLiquidation(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowInterestRedirectionTo"
      | "balanceOf"
      | "burnOnLiquidation"
      | "getInterestRedirectionAddress"
      | "getRedirectedBalance"
      | "getUserIndex"
      | "isTransferAllowed"
      | "mintOnDeposit"
      | "principalBalanceOf"
      | "redeem"
      | "redirectInterestStream"
      | "redirectInterestStreamOf"
      | "totalSupply"
      | "transferOnLiquidation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowInterestRedirectionTo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnOnLiquidation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRedirectionAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedirectedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferAllowed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOnDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "principalBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redirectInterestStream",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redirectInterestStreamOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOnLiquidation",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowInterestRedirectionTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOnLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRedirectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedirectedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "principalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redirectInterestStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redirectInterestStreamOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOnLiquidation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IATokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserIndex(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowInterestRedirectionTo(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnOnLiquidation(
    _account: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInterestRedirectionAddress(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRedirectedBalance(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  isTransferAllowed(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintOnDeposit(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  principalBalanceOf(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redirectInterestStream(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redirectInterestStreamOf(
    _from: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOnLiquidation(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowInterestRedirectionTo(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redirectInterestStream(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserIndex(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowInterestRedirectionTo(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnOnLiquidation(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInterestRedirectionAddress(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedirectedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserIndex(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferAllowed(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintOnDeposit(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    principalBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redirectInterestStream(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redirectInterestStreamOf(
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOnLiquidation(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
