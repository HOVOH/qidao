/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IStablecoinInterface extends utils.Interface {
  functions: {
    "borrowToken(uint256,uint256)": FunctionFragment;
    "transferVault(uint256,address)": FunctionFragment;
    "createVault()": FunctionFragment;
    "withdrawCollateral(uint256,uint256)": FunctionFragment;
    "payBackToken(uint256,uint256)": FunctionFragment;
    "destroyVault(uint256)": FunctionFragment;
    "getDebtCeiling()": FunctionFragment;
    "getEthPriceSource()": FunctionFragment;
    "getClosingFee()": FunctionFragment;
    "getOpeningFee()": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "getTokenPriceSource()": FunctionFragment;
    "buyRiskyVault(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowToken"
      | "transferVault"
      | "createVault"
      | "withdrawCollateral"
      | "payBackToken"
      | "destroyVault"
      | "getDebtCeiling"
      | "getEthPriceSource"
      | "getClosingFee"
      | "getOpeningFee"
      | "depositCollateral"
      | "getTokenPriceSource"
      | "buyRiskyVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payBackToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyRiskyVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payBackToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyRiskyVault",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStablecoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStablecoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClosingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOpeningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferVault(
    vaultID: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payBackToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositCollateral(
    vaultID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  buyRiskyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createVault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPriceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClosingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpeningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenPriceSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
