/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface QiStablecoinInterface extends utils.Interface {
  functions: {
    "setTokenPeg(uint256)": FunctionFragment;
    "stabilityPool()": FunctionFragment;
    "name()": FunctionFragment;
    "changeEthPriceSource(address)": FunctionFragment;
    "borrowToken(uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "closingFee()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "vaultOwner(uint256)": FunctionFragment;
    "setClosingFee(uint256)": FunctionFragment;
    "transferVault(uint256,address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "ethPriceSource()": FunctionFragment;
    "createVault()": FunctionFragment;
    "treasury()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "setTreasury(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "openingFee()": FunctionFragment;
    "withdrawCollateral(uint256,uint256)": FunctionFragment;
    "payBackToken(uint256,uint256)": FunctionFragment;
    "destroyVault(uint256)": FunctionFragment;
    "setOpeningFee(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "getDebtCeiling()": FunctionFragment;
    "symbol()": FunctionFragment;
    "getEthPriceSource()": FunctionFragment;
    "setStabilityPool(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "vaultExistence(uint256)": FunctionFragment;
    "getClosingFee()": FunctionFragment;
    "vaultCount()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "getOpeningFee()": FunctionFragment;
    "setDebtCeiling(uint256)": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "erc721()": FunctionFragment;
    "getTokenPriceSource()": FunctionFragment;
    "tokenPeg()": FunctionFragment;
    "buyRiskyVault(uint256)": FunctionFragment;
    "vaultDebt(uint256)": FunctionFragment;
    "vaultCollateral(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "debtCeiling()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setTokenPeg"
      | "stabilityPool"
      | "name"
      | "changeEthPriceSource"
      | "borrowToken"
      | "approve"
      | "totalSupply"
      | "closingFee"
      | "transferFrom"
      | "decimals"
      | "increaseAllowance"
      | "vaultOwner"
      | "setClosingFee"
      | "transferVault"
      | "mint"
      | "ethPriceSource"
      | "createVault"
      | "treasury"
      | "balanceOf"
      | "setTreasury"
      | "renounceOwnership"
      | "openingFee"
      | "withdrawCollateral"
      | "payBackToken"
      | "destroyVault"
      | "setOpeningFee"
      | "owner"
      | "isOwner"
      | "getDebtCeiling"
      | "symbol"
      | "getEthPriceSource"
      | "setStabilityPool"
      | "burn"
      | "decreaseAllowance"
      | "vaultExistence"
      | "getClosingFee"
      | "vaultCount"
      | "transfer"
      | "getOpeningFee"
      | "setDebtCeiling"
      | "depositCollateral"
      | "erc721"
      | "getTokenPriceSource"
      | "tokenPeg"
      | "buyRiskyVault"
      | "vaultDebt"
      | "vaultCollateral"
      | "allowance"
      | "debtCeiling"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setTokenPeg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeEthPriceSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVault",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payBackToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpeningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEthPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStabilityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultExistence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc721", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenPeg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyRiskyVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "setTokenPeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeEthPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payBackToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultExistence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPeg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyRiskyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "CreateVault(uint256,address)": EventFragment;
    "DestroyVault(uint256)": EventFragment;
    "TransferVault(uint256,address,address)": EventFragment;
    "DepositCollateral(uint256,uint256)": EventFragment;
    "WithdrawCollateral(uint256,uint256)": EventFragment;
    "BorrowToken(uint256,uint256)": EventFragment;
    "PayBackToken(uint256,uint256,uint256)": EventFragment;
    "BuyRiskyVault(uint256,address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBackToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyRiskyVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CreateVaultEventObject {
  vaultID: BigNumber;
  creator: string;
}
export type CreateVaultEvent = TypedEvent<
  [BigNumber, string],
  CreateVaultEventObject
>;

export type CreateVaultEventFilter = TypedEventFilter<CreateVaultEvent>;

export interface DestroyVaultEventObject {
  vaultID: BigNumber;
}
export type DestroyVaultEvent = TypedEvent<
  [BigNumber],
  DestroyVaultEventObject
>;

export type DestroyVaultEventFilter = TypedEventFilter<DestroyVaultEvent>;

export interface TransferVaultEventObject {
  vaultID: BigNumber;
  from: string;
  to: string;
}
export type TransferVaultEvent = TypedEvent<
  [BigNumber, string, string],
  TransferVaultEventObject
>;

export type TransferVaultEventFilter = TypedEventFilter<TransferVaultEvent>;

export interface DepositCollateralEventObject {
  vaultID: BigNumber;
  amount: BigNumber;
}
export type DepositCollateralEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositCollateralEventObject
>;

export type DepositCollateralEventFilter =
  TypedEventFilter<DepositCollateralEvent>;

export interface WithdrawCollateralEventObject {
  vaultID: BigNumber;
  amount: BigNumber;
}
export type WithdrawCollateralEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawCollateralEventObject
>;

export type WithdrawCollateralEventFilter =
  TypedEventFilter<WithdrawCollateralEvent>;

export interface BorrowTokenEventObject {
  vaultID: BigNumber;
  amount: BigNumber;
}
export type BorrowTokenEvent = TypedEvent<
  [BigNumber, BigNumber],
  BorrowTokenEventObject
>;

export type BorrowTokenEventFilter = TypedEventFilter<BorrowTokenEvent>;

export interface PayBackTokenEventObject {
  vaultID: BigNumber;
  amount: BigNumber;
  closingFee: BigNumber;
}
export type PayBackTokenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PayBackTokenEventObject
>;

export type PayBackTokenEventFilter = TypedEventFilter<PayBackTokenEvent>;

export interface BuyRiskyVaultEventObject {
  vaultID: BigNumber;
  owner: string;
  buyer: string;
  amountPaid: BigNumber;
}
export type BuyRiskyVaultEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BuyRiskyVaultEventObject
>;

export type BuyRiskyVaultEventFilter = TypedEventFilter<BuyRiskyVaultEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface QiStablecoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QiStablecoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setTokenPeg(
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    changeEthPriceSource(
      ethPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    closingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setClosingFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethPriceSource(overrides?: CallOverrides): Promise<[string]>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setTreasury(
      _treasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpeningFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    getDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    getEthPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStabilityPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultExistence(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getClosingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOpeningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDebtCeiling(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc721(overrides?: CallOverrides): Promise<[string]>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPeg(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setTokenPeg(
    _tokenPeg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  changeEthPriceSource(
    ethPriceSourceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  closingFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setClosingFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferVault(
    vaultID: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethPriceSource(overrides?: CallOverrides): Promise<string>;

  createVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  setTreasury(
    _treasury: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openingFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payBackToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpeningFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  setStabilityPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultExistence(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

  vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

  setDebtCeiling(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    vaultID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc721(overrides?: CallOverrides): Promise<string>;

  getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

  buyRiskyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  vaultCollateral(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setTokenPeg(
      _tokenPeg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    changeEthPriceSource(
      ethPriceSourceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    closingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setClosingFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ethPriceSource(overrides?: CallOverrides): Promise<string>;

    createVault(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    setTreasury(
      _treasury: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    openingFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpeningFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    setStabilityPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultExistence(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtCeiling(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    erc721(overrides?: CallOverrides): Promise<string>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "CreateVault(uint256,address)"(
      vaultID?: null,
      creator?: null
    ): CreateVaultEventFilter;
    CreateVault(vaultID?: null, creator?: null): CreateVaultEventFilter;

    "DestroyVault(uint256)"(vaultID?: null): DestroyVaultEventFilter;
    DestroyVault(vaultID?: null): DestroyVaultEventFilter;

    "TransferVault(uint256,address,address)"(
      vaultID?: null,
      from?: null,
      to?: null
    ): TransferVaultEventFilter;
    TransferVault(
      vaultID?: null,
      from?: null,
      to?: null
    ): TransferVaultEventFilter;

    "DepositCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): DepositCollateralEventFilter;
    DepositCollateral(
      vaultID?: null,
      amount?: null
    ): DepositCollateralEventFilter;

    "WithdrawCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;
    WithdrawCollateral(
      vaultID?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;

    "BorrowToken(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): BorrowTokenEventFilter;
    BorrowToken(vaultID?: null, amount?: null): BorrowTokenEventFilter;

    "PayBackToken(uint256,uint256,uint256)"(
      vaultID?: null,
      amount?: null,
      closingFee?: null
    ): PayBackTokenEventFilter;
    PayBackToken(
      vaultID?: null,
      amount?: null,
      closingFee?: null
    ): PayBackTokenEventFilter;

    "BuyRiskyVault(uint256,address,address,uint256)"(
      vaultID?: null,
      owner?: null,
      buyer?: null,
      amountPaid?: null
    ): BuyRiskyVaultEventFilter;
    BuyRiskyVault(
      vaultID?: null,
      owner?: null,
      buyer?: null,
      amountPaid?: null
    ): BuyRiskyVaultEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
  };

  estimateGas: {
    setTokenPeg(
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    changeEthPriceSource(
      ethPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    closingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClosingFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    setTreasury(
      _treasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openingFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpeningFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    setStabilityPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultExistence(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosingFee(overrides?: CallOverrides): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtCeiling(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc721(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPeg(overrides?: CallOverrides): Promise<BigNumber>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setTokenPeg(
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeEthPriceSource(
      ethPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClosingFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethPriceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpeningFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPriceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStabilityPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultExistence(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOpeningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtCeiling(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPeg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyRiskyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
